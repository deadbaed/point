"file syntax
syntax on
filetype plugin on

set mouse=a       " Enable mouse (esp. for balloons and scrolling in popups)
set ttymouse=sgr  " .. also in 'terminals that emit SGR-styled mouse reporting'

"leader keys
let maplocalleader = ','

"search
set incsearch "highlight search result as you type it
set hlsearch "highlight all search results
set showmatch "highlight matching () {} []

"display lines
set number relativenumber

"window navigation
"see :help key-notation
noremap <TAB> <C-W>w

"aliases
cnoreabbrev Wq wq
cnoreabbrev WQ wq
cnoreabbrev Q q
cnoreabbrev Qa qa
cnoreabbrev QA qa

"always enable status line
set laststatus=2

"configure status line
set statusline=
" start with space for clean look
set statusline+=\ 
set statusline+=%f " filename
set statusline+=%m "modification flag
set statusline+=%r "read only flag
set statusline+=%= "separation
set statusline+=\ %y "type of file
set statusline+=\ %{&fileencoding?&fileencoding:&encoding} "file info
set statusline+=\[%{&fileformat}\] "file format
set statusline+=\ %p%% "percentage of file
set statusline+=\ %l:%c "line + col
"add final space for clean look
set statusline+=\ 

""" Plugins
""" vim-plug https://github.com/junegunn/vim-plug
call plug#begin()
Plug 'tpope/vim-sensible' "sensible defaults
Plug 'morhetz/gruvbox' "colorscheme
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } } "fuzzy finder
Plug 'junegunn/fzf.vim' "fuzzy finder
Plug 'Raimondi/delimitMate' "automatically open/close braces
Plug 'freitass/todo.txt-vim' "todo.txt
Plug 'tpope/vim-vinegar' "netrw
Plug 'lambdalisue/fern.vim' "tree viewer
Plug 'lambdalisue/fern-git-status.vim' "tree viewer git status
Plug 'prabirshrestha/vim-lsp' "lsp
Plug 'mattn/vim-lsp-settings' "download lsp
Plug 'prabirshrestha/asyncomplete.vim' "autocompletion
Plug 'prabirshrestha/asyncomplete-lsp.vim' "autocompletion with lsp
Plug 'liuchengxu/vista.vim' "outline of a file
Plug 'airblade/vim-gitgutter' "git status in files
Plug 'rhysd/committia.vim' "better git commit
Plug 'thezeroalpha/vim-relatively-complete' "autocomplete files
Plug 'preservim/nerdcommenter' "comment
Plug 'wfxr/minimap.vim', {'do': ':!cargo install --locked code-minimap'} "minimap
call plug#end()

"colors
set background=dark
colorscheme gruvbox
if (has("termguicolors"))
  set termguicolors
endif

"fuzzy-search
"files
nnoremap <leader>f :Files<CR>
"grep
nnoremap <leader>g :Rg<CR>
"ripgrep
nnoremap <leader>G :RG<CR>

"lsp
function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif

    nmap <buffer> <leader>a <plug>(lsp-code-action-float)
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
    nnoremap <buffer> <expr><c-d> lsp#scroll(-4)

    let g:lsp_format_sync_timeout = 1000
    autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')

    " refer to doc to add more commands
endfunction

"lsp settings
let g:lsp_settings = {
\  'rust-analyzer': {
\    'initialization_options': {
\      'cargo': {
\        'buildScripts': {
\          'enable': v:true,
\        },
\      },
\      'procMacro': {
\        'enable': v:true,
\      },
\      'check': {
\        'command': 'clippy',
\      },
\    },
\   }
\}

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

"asyncomplete
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"

"committia
let g:committia_hooks = {}
function! g:committia_hooks.edit_open(info)
    " Additional settings
    setlocal spell

    " Scroll the diff window from insert mode
    " Map <C-n> and <C-p>
    imap <buffer><C-n> <Plug>(committia-scroll-diff-down-half)
    imap <buffer><C-p> <Plug>(committia-scroll-diff-up-half)
endfunction

"project tree
nmap <F2> :Fern . -drawer -toggle -reveal=% -width=60<CR>

"file outline
nmap <F3> :Vista!!<CR>

"file completion
imap <C-x><C-f> <Plug>RelativelyCompleteFile

"comment
let g:NERDCreateDefaultMappings = 0
let g:NERDDefaultAlign = 'left'
let g:NERDSpaceDelims = 1
let g:NERDCommentEmptyLines = 1
nmap <C-_> <plug>NERDCommenterToggle<CR>
vmap <C-_> <plug>NERDCommenterToggle<CR>gv

"minimap
let g:minimap_git_colors = 1
nmap <F4> :MinimapToggle<CR>

